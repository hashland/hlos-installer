#!/bin/sh

TMPDIR=/tmp/hlos
CPU_ARCH=$(uname -m)

API_BASE_URL=https://api.hashland.cc

if [ -z "$VERSION" ]; then
	VERSION=@beta
fi

migrate_mac()
{
	OLD=$1
	NEW=$2
	MINER_ID=$(curl -s -H "Authorization: Bearer $API_KEY" "$API_BASE_URL/miners?mac=$OLD" | ./jq -r .data.miners[0].id)

	if [ ! -z "$MINER_ID" ] && [ "$MINER_ID" != "null" ]; then
		echo ""
		echo "Setting MAC address for miner id $MINER_ID from $OLD to $NEW"
		echo ""
		curl -s -H "Authorization: Bearer $API_KEY" -X PUT -d mac=$NEW "$API_BASE_URL/miners/$MINER_ID" >/dev/null
	else
		echo ""
		echo "MAC Migration requested, but miner not found in database, skipping!"
		echo ""
	fi
}

write_scripta_status()
{
if [ -f /var/www/f_status.php ]; then
	mv /var/www/f_status.php /var/www/f_status.php.bak

	cat <<_EOF_ > /var/www/f_status.php
	{
	        "info": [
	                {"type": "info", "text": "&#10024; Welcome to hashland &#10024;<br>Please stay tuned while we're upgrading your device."}
	        ],
	        "status": {
	                "minerDown": true,
	                "minerUp": false
	        }
	}
_EOF_
fi
}

write_uboot_from_image()
{
	IMAGE=$1

	echo
	echo Installing new bootloader...
	echo

	dd if=$IMAGE of=/dev/mmcblk0 bs=1024 skip=8 seek=8 count=536 conv=fsync
}

write_uboot_overlay_env()
{
	MAC=$1
	SERIAL=$2

	if [ ! -x /usr/bin/mkenvimage ]; then
		echo "Missing mkenvimage tool, aborting!";
		exit 1
	fi

	echo "ethaddr=$MAC">uEnv.txt

	if [ ! -z "$SERIAL" ]; then
		echo "serial#=$SERIAL">>uEnv.txt
	fi
	
	if [ ! -z "$API_KEY" ]; then
		echo "hashland_api_key=$API_KEY">>uEnv.txt
	fi

	mkenvimage -s 131072 -o uEnv.bin uEnv.txt
	dd if=uEnv.bin of=/dev/mmcblk0 bs=1024 seek=544 count=128 conv=fsync
}

write_uboot_upgrade_script()
{
	IMAGE_NAME=$1
	FILENAME=$2

	if [ ! -x /usr/bin/mkimage ]; then
		echo "Missing mkimage tool, aborting!"
		exit 1
	fi

	SIZE=$(stat -c %s $IMAGE_NAME)
	SECTORS=$(expr $SIZE / 512 + 1)
	SECTORS_HEX=$(printf '0x%x' $SECTORS)

cat <<EOF >$FILENAME.txt
# load new image into ram
ext4load mmc 0:2 0x42000000 $IMAGE_NAME

# save environment overlay into ram
mmc read 0x41000000 0x440 0x100

# write new image
mmc write 0x42000000 0x0 $SECTORS_HEX

# write environment overlay back to mmc
mmc write 0x41000000 0x440 0x100

reset
EOF

mkimage -C none -A arm -T script -d $FILENAME.txt $FILENAME

if [ ! -f $FILENAME ]; then
	echo "Could not generate boot script, aborting!"
	exit 1
fi

}

board_auto_detect()
{
if [ -x /usr/bin/lsusb ]; then
	# search for baikal hash boards
	if lsusb -d 0483:5740>/dev/null; then
		./sgminer-api stats >sgminer.stats

		if grep HWV=37265 sgminer.stats >/dev/null; then
			echo "Detected Baikal Giant B"
			BOARD_NAME=baikal,giant-b
		elif grep HWV=29297 sgminer.stats >/dev/null; then
			echo "Detected Baikal X10"
			BOARD_NAME=baikal,giant-x10
		fi

        fi
fi
}

case $CPU_ARCH in
	x86_64)
		TOOLS_URL=http://cdn.hashland.cc/tools/x86_64-static.tar.gz
		;;
	armv7l)
		TOOLS_URL=http://cdn.hashland.cc/tools/armhf-static.tar.gz
		;;
	*)
		echo "Sorry, your cpu architecture is not supported"
		exit 1
		;;
esac
	
[ -d $TMPDIR ] && rm -r $TMPDIR

mkdir $TMPDIR
cd $TMPDIR 

echo "Downloading tools..."

curl "$TOOLS_URL" -o tools.tar.gz

if [ ! -f tools.tar.gz ]; then
	echo "Could not download tools, aborting!"
	exit 1
fi

tar -xzf tools.tar.gz

echo ""

if [ -z "$BOARD_NAME" ]; then
	if [ -f /lib/functions/uci-defaults.sh ]; then
		# if we're already on hlos use onboard tooling to find out BOARD_NAME
		. /lib/functions/uci-defaults.sh
		BOARD_NAME=$(board_name)
	else
		board_auto_detect
	fi
fi

if [ -z "$BOARD_NAME" ]; then
	echo ""
	echo "Could not auto detect miner type, specify it manually:"
	echo ""
	echo "Example:"
	echo ""
	echo "curl https://hashland.cc/install | sudo BOARD_NAME=baikal,giant-b sh"
	echo
	echo "Available BOARD_NAMEs: baikal,giant-b"
	echo ""
	echo "If your device is supported but not automatically detected "
	echo "please open an issue at https://github.com/hashland/hlos-installer/issues"
	echo
	exit 1
fi

echo ""
echo -n "Searching for Hashland OS version $VERSION, board $BOARD_NAME ... "

curl -s -- "$API_BASE_URL/hlos-sysimages/sysupgrade?name=$BOARD_NAME&version=$VERSION" >version.json

HLOS_VERSION=$(cat version.json | ./jq -r .data.hlos_sysimage.version)
HLOS_URL=$(cat version.json | ./jq -r .data.hlos_sysimage.url)

if [ -z "$HLOS_VERSION" ] || [ "$HLOS_VERSION" = "null" ] || [ -z "$HLOS_URL" ] || [ "$HLOS_VERSION" = "null" ]; then
	echo "Could not find a suitable sysimage, aborting!"
	exit 1
fi

echo "found Hashland OS version $HLOS_VERSION"
echo ""

if [ -x /sbin/sysupgrade ]; then
	exec sysupgrade $HLOS_URL
fi


case "$BOARD_NAME" in
       	baikal,giant-b|baikal-x10)
		if [ -f /media/boot/boot.scr ]; then
			BOOT_SCRIPT=/media/boot/boot.scr
		
		elif [ -f /boot/boot.scr ]; then
			BOOT_SCRIPT=/media/boot/boot.scr
		else
			echo "Could not find boot.scr, aborting!"
			exit 1
		fi

		write_scripta_status

		echo "Downloading sysimage from $HLOS_URL ..."
		curl -- "$HLOS_URL" >/hlos.img

		OLD_MAC=$(cat /sys/class/net/eth0/address)

		# import SID, SERIAL & MAC environment variables
		eval $(./sunxi-siddump)

		# generate upgrade boot script	
		write_uboot_upgrade_script /hlos.img boot.scr


		if [ ! -z "$MIGRATE_MAC" ]; then
			# generate u-boot overlay environment to preserve old mac address
			migrate_mac "$OLD_MAC" "$MAC"
			OLD_MAC=$MAC
		fi

		mv $BOOT_SCRIPT $BOOT_SCRIPT.bak
		mv boot.scr $BOOT_SCRIPT

		write_uboot_from_image "/hlos.img"	
		write_uboot_overlay_env "$OLD_MAC" "$SERIAL"
		;;
	*)
		echo "Could not determine installation strategy for BOARD_NAME $BOARD_NAME"
                exit 1
                ;;
esac

echo
echo
echo Please wait a few minutes until the upgrade is finished. Do not turn power off while upgrade is in process!
echo
echo

sync
reboot
